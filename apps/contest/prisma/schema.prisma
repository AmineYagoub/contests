// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/contest-service"  // Dev
  // output   = "../node_modules/@prisma/contest-service"  // Production
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tag {
  id                String    @id @default(uuid())
  title             String    @db.VarChar(255) @unique
  created           DateTime  @default(now())
  updated           DateTime  @updatedAt
  questions         Question[]
  contests          Contest[]
}

model Contest {
  id                    String    @id @default(uuid())
  type                  String    @db.VarChar(100)
  title                 String    @db.VarChar(255) @unique
  status                String    @db.VarChar(100)
  level                 Json      @db.Json
  duration              Int?      @db.UnsignedSmallInt @default(40)
  startTime             DateTime  @db.DateTime
  easyQuestionCount     Int       @db.UnsignedInt
  mediumQuestionCount   Int       @db.UnsignedInt
  hardQuestionCount     Int       @db.UnsignedInt
  maxParticipants       Int?      @db.UnsignedInt @default(0)
  participants          Json?     @db.Json
  countries             Json?     @db.Json
  published             Boolean?  @default(true)
  authorId              Int       @db.UnsignedInt
  created               DateTime  @default(now())
  updated               DateTime  @updatedAt
  tags                  Tag[]
  questions             Question[]
  answers               Answer[]

  @@index([type(length: 100, sort: Desc)])
  @@index([status(length: 100, sort: Desc)])
  @@index([authorId, created(sort: Desc)])
}




model Question {
  id                String    @id @default(uuid())
  type              String    @db.VarChar(100)
  title             String    @db.VarChar(255)
  correctAnswer     String    @db.VarChar(255)
  lesson            String?   @db.VarChar(255) @default("")
  // level             Json      @db.Json
  usedCount         Int?      @db.UnsignedInt @default(0)
  options           Json      @db.Json
  published         Boolean?  @default(true)
  authorId          Int       @db.UnsignedInt
  created           DateTime  @default(now())
  updated           DateTime  @updatedAt
  contests          Contest[]
  tags              Tag[]

  @@index([type(length: 100, sort: Desc)])
  @@index([usedCount(sort: Desc)])
  @@index([authorId, created(sort: Desc)])
}

model Answer {
  id                String    @id @default(uuid())
  contestId         String
  userId            String
  contest           Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  answers           Json      @db.Json
  annulled          Boolean?  @default(false)
  annulledReason    String?   @db.VarChar(255) @default("")
  created           DateTime  @default(now())
  updated           DateTime  @updatedAt

  @@index([userId, contestId(sort: Desc)])
}
